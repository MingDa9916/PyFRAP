Replaced Fiji with bioformats. 

PyFRAP so far relied in Fiji to access microscope image formats such as czi. 
This was now replaced by bioformats. For this, we added several functions to
the pyfrp_img_module and pyfrp_misc_module. We also added python-bioformats to
the requirements.txt. Note that for bioformats to run, we need to start a javabridge
to be started. The PyFRAP main GUI does this automatically. However, only one
instance of this javabridge can run at the same time. PyFRAP automatically kills
the bridge again if it is closes properly, however, in case of a crash we might 
need to find a workaround. More important: If a PyFRAP script is run that requires 
bioformats support, we from now on always need to start the javabridge.

Added numpy-stl, solidpython, wget to requirements.txt


TODO:
	
	- Data structure:
		- We might want to move away from saving to pickle files. IDEA: 
			- molecule files do not save anymore list of embryos but just list of path to embryo files.
			- whenever embryo is needed, molecule calls getEmbryo and thus loading file. This also happens
			  user clicks on gui on embryo
			- Could also include a loadAll option. 
	- GUI integration:
		- mesh merging
		- Simulation visualization
		- Geometry visualization
		- Multiple plotting functions
		- Embryo slicing
		- Simulation to image export
		- In general when plot command is called, ask if plotting should be done in current axis.
		- Add plot modifier from PyFDAP
		- Add additional plotting functions
		- Move all plotting functionalities in GUI to Plotting MB
		- In showObjPropsInBar, if array is longer than maxLength, write sth like "array/list of shape"
		- Get embryo/molecule compression saving running again.
		- Include 2D geometries, e.g. allow dim setting for custom geometries.
	- Path management. Check at installation if there is a installation of gmsh and fiji in executables folder. If so, set path to those.
	- Might want to move away from Fiji and use python OME instead. Might just grab code from quantDorsal project
	- Might be faster in analysis if we load all files at first, put them in common numpy array, apply all image manupulation steps
	  and finally grab ROIs via c=imgs[idxs,:]
	- pyfrp_gmsh_geometry.ruledSurface should store more than a single lineLoop but rather have a lineLoops list.
	- Need to add pyfrp_gmsh_geometry.planeSurface class.
	- Speed-up via trillionos
	- simulation.showIC via vtk
	- In GUI, when selecting fnFlatten, we need to make sure that we add slash
		
Additions:
	- ``pyfrp.modules.pyfrp_img_module.readBioFormats``: Reads any kind of OME bioformat file.
	- ``pyfrp.modules.pyfrp_img_module.extractBioFormats``: Reads any kind of OME bioformat file and saves it to .tif files.
	
Changes:
	- ``pyfrp.gui.pyfrp_app``: Now loads/kills the javabridge necessary for bioformats to work.
	- ``pyfrp.modules.pyfrp_misc_module.buildEmbryoWizard`` now uses the new bioformats functions.
	
Bugfixes:
	
	